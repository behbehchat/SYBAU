<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Beh Beh Chat</title>
    <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
    <style>
        :root {
            --bg-primary: #121212;
            --bg-secondary: #1e1e1e;
            --bg-tertiary: #2d2d2d;
            --text-primary: #e6e6e6;
            --text-secondary: #b3b3b3;
            --accent: #bb86fc;
            --accent-secondary: #03dac6;
            --danger: #cf6679;
            --success: #03dac6;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: var(--bg-primary);
            color: var(--text-primary);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            overflow-x: hidden;
        }
        
        .container {
            width: 100%;
            max-width: 1000px;
            background: var(--bg-secondary);
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 95vh;
            position: relative;
            z-index: 2;
        }
        
        header {
            background: var(--bg-tertiary);
            color: var(--text-primary);
            padding: 15px 20px;
            text-align: center;
            position: relative;
            border-bottom: 1px solid #333;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .logo-img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            overflow: hidden;
        }
        
        h1 {
            font-size: 1.8rem;
            color: var(--accent);
        }
        
        .header-controls {
            display: flex;
            gap: 10px;
        }
        
        .btn {
            padding: 8px 15px;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: var(--accent);
            color: black;
        }
        
        .btn-primary:hover {
            background: #9b6de0;
        }
        
        .btn-secondary {
            background: var(--bg-tertiary);
            color: var(--text-primary);
            border: 1px solid #444;
        }
        
        .btn-secondary:hover {
            background: #333;
        }
        
        .btn-success {
            background: var(--success);
            color: black;
        }
        
        .btn-success:hover {
            background: #00c9b3;
        }
        
        .btn-danger {
            background: var(--danger);
            color: white;
        }
        
        .btn-danger:hover {
            background: #b95565;
        }
        
        .btn-small {
            padding: 4px 8px;
            font-size: 0.8rem;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .modal-content {
            background: var(--bg-secondary);
            padding: 30px;
            border-radius: 10px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.5);
            border: 1px solid #333;
        }
        
        .modal h2 {
            margin-bottom: 20px;
            color: var(--accent);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: var(--text-secondary);
        }
        
        .form-group input {
            width: 100%;
            padding: 12px;
            border: 1px solid #444;
            border-radius: 5px;
            font-size: 1rem;
            background: var(--bg-tertiary);
            color: var(--text-primary);
        }
        
        .form-group input:focus {
            outline: none;
            border-color: var(--accent);
        }
        
        .chat-container {
            display: flex;
            flex: 1;
            overflow: hidden;
        }
        
        .users-panel {
            width: 250px;
            background: var(--bg-tertiary);
            padding: 15px;
            border-right: 1px solid #333;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }
        
        .users-panel h3 {
            margin-bottom: 15px;
            color: var(--accent);
            padding-bottom: 10px;
            border-bottom: 1px solid #444;
        }
        
        .user-list {
            list-style: none;
            flex: 1;
        }
        
        .user-item {
            padding: 10px;
            margin-bottom: 8px;
            background: var(--bg-secondary);
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            display: flex;
            align-items: center;
            border: 1px solid #444;
        }
        
        .user-avatar {
            width: 35px;
            height: 35px;
            background: var(--accent);
            border-radius: 50%;
            margin-right: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: black;
            font-weight: bold;
            font-size: 16px;
            flex-shrink: 0;
        }
        
        .user-info {
            min-width: 0;
            overflow: hidden;
        }
        
        .user-name {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            font-weight: 500;
        }
        
        .peer-id {
            font-size: 0.7rem;
            color: var(--text-secondary);
            margin-top: 2px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: var(--bg-primary);
            display: flex;
            flex-direction: column;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 12px 16px;
            border-radius: 18px;
            max-width: 80%;
            word-wrap: break-word;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
        
        .message.received {
            background: var(--bg-tertiary);
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }
        
        .message.sent {
            background: var(--accent);
            color: black;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }
        
        .message.system {
            background: transparent;
            color: var(--text-secondary);
            font-style: italic;
            text-align: center;
            margin: 20px 0;
            max-width: 100%;
        }
        
        .message-sender {
            font-weight: bold;
            margin-bottom: 5px;
            font-size: 0.9rem;
        }
        
        .message-time {
            font-size: 0.7rem;
            text-align: right;
            margin-top: 5px;
            opacity: 0.8;
        }
        
        .input-area {
            padding: 15px;
            background: var(--bg-tertiary);
            display: flex;
            border-top: 1px solid #333;
        }
        
        .message-input {
            flex: 1;
            padding: 12px;
            border: 1px solid #444;
            border-radius: 20px;
            font-size: 1rem;
            margin-right: 10px;
            background: var(--bg-secondary);
            color: var(--text-primary);
        }
        
        .message-input:focus {
            outline: none;
            border-color: var(--accent);
        }
        
        .send-btn {
            background: var(--accent);
            color: black;
            border: none;
            border-radius: 20px;
            padding: 12px 20px;
            cursor: pointer;
            font-weight: bold;
        }
        
        .send-btn:hover {
            background: #9b6de0;
        }
        
        .connection-panel {
            background: var(--bg-tertiary);
            padding: 15px;
            border-top: 1px solid #333;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .connection-status {
            display: flex;
            align-items: center;
        }
        
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
            transition: background-color 0.3s ease;
        }
        
        .status-connected {
            background: var(--success);
        }
        
        .status-disconnected {
            background: var(--danger);
        }
        
        .status-connecting {
            background: #ffcc00;
        }
        
        .ip-display {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .peer-id-display {
            padding: 8px 12px;
            background: var(--bg-secondary);
            border-radius: 5px;
            font-family: monospace;
            border: 1px solid #444;
            font-size: 0.9rem;
        }
        
        .copy-btn {
            background: var(--accent);
            color: black;
            border: none;
            border-radius: 5px;
            padding: 6px 10px;
            cursor: pointer;
            font-size: 0.8rem;
        }
        
        .copy-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .gif-container {
            margin-top: 15px;
            text-align: center;
            padding: 10px;
            border-top: 1px solid #444;
        }
        
        .gif-container img {
            max-width: 100%;
            border-radius: 8px;
            margin-top: 5px;
            max-height: 100px;
            object-fit: cover;
        }
        
        .floating-gif {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            animation: float 6s ease-in-out infinite;
        }
        
        .floating-gif img {
            width: 120px;
            height: auto;
            display: block;
        }
        
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-15px); }
            100% { transform: translateY(0px); }
        }
        
        /* Media message styles */
        .media-message {
            max-width: 300px;
        }
        
        .media-content {
            margin-top: 8px;
            border-radius: 12px;
            overflow: hidden;
        }
        
        .media-content img, .media-content video {
            width: 100%;
            max-height: 200px;
            object-fit: cover;
            display: block;
        }
        
        .audio-player {
            width: 100%;
            height: 40px;
            margin-top: 8px;
            border-radius: 20px;
            background: rgba(0, 0, 0, 0.2);
        }
        
        /* Media controls */
        .media-controls {
            display: flex;
            gap: 10px;
            margin-right: 10px;
        }
        
        .media-btn {
            background: var(--bg-secondary);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            color: var(--text-primary);
            font-size: 1.2rem;
        }
        
        .media-btn:hover {
            background: var(--bg-tertiary);
        }
        
        .record-btn.recording {
            animation: pulse 1.5s infinite;
            background: var(--danger);
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        /* Recording indicator */
        .recording-indicator {
            display: none;
            align-items: center;
            margin-right: 10px;
            color: var(--danger);
        }
        
        .recording-indicator.active {
            display: flex;
        }
        
        .recording-dot {
            width: 10px;
            height: 10px;
            background: var(--danger);
            border-radius: 50%;
            margin-right: 5px;
            animation: blink 1s infinite;
        }
        
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.3; }
            100% { opacity: 1; }
        }
        
        @media (max-width: 768px) {
            .chat-container {
                flex-direction: column;
            }
            
            .users-panel {
                width: 100%;
                border-right: none;
                border-bottom: 1px solid #333;
                max-height: 200px;
            }
            
            .container {
                height: 100vh;
                border-radius: 0;
            }
            
            header {
                flex-direction: column;
                gap: 10px;
                padding: 10px;
            }
            
            .header-controls {
                width: 100%;
                justify-content: center;
            }
            
            .connection-panel {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start;
            }
            
            .ip-display {
                width: 100%;
                justify-content: space-between;
            }
            
            .floating-gif {
                right: 10px;
                bottom: 10px;
            }
            
            .floating-gif img {
                width: 80px;
            }
            
            .media-controls {
                margin-bottom: 10px;
                justify-content: center;
            }
        }
        
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 15px 20px;
            background: var(--bg-tertiary);
            color: var(--text-primary);
            border-radius: 5px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            z-index: 1000;
            border-left: 4px solid var(--accent);
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
        }
        
        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        .room-code-input {
            font-family: monospace;
            font-size: 1.2rem;
            letter-spacing: 5px;
            text-align: center;
        }
        
        /* Hidden file input */
        .hidden-input {
            display: none;
        }
        
        /* Button disabled state */
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .btn:disabled:hover {
            transform: none;
            filter: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <div class="logo-img">
                    <img src="https://media.tenor.com/6fwaqkP8tP0AAAAC/niche-fruit.gif" alt="Beh Beh Logo" style="width: 100%; height: 100%; object-fit: cover;">
                </div>
                <h1>Beh Beh Chat</h1>
            </div>
            <div class="header-controls">
                <button class="btn btn-success" id="hostServerBtn" disabled>Host Server</button>
                <button class="btn btn-secondary" id="showConnectModalBtn" disabled>Connect</button>
                <button class="btn btn-danger" id="disconnectBtn" disabled>Disconnect</button>
            </div>
        </header>
        
        <div class="chat-container">
            <div class="users-panel">
                <h3>Connected Users</h3>
                <ul class="user-list" id="userList">
                    <li class="user-item" id="currentUserItem">
                        <div class="user-avatar">Y</div>
                        <div class="user-info">
                            <div class="user-name">You</div>
                            <div class="peer-id" id="currentPeerId">Not connected</div>
                        </div>
                    </li>
                </ul>
                
                <div class="gif-container">
                    <div>Enjoy the vibe</div>
                    <img src="https://media.tenor.com/6fwaqkP8tP0AAAAC/niche-fruit.gif" alt="Beh Beh GIF">
                </div>
            </div>
            
            <div class="chat-area">
                <div class="messages" id="messagesContainer">
                    <div class="message system">
                        <div>Welcome to Beh Beh Chat! Host a server or connect to one to start chatting.</div>
                        <div class="message-time">Just now</div>
                    </div>
                </div>
                
                <div class="input-area">
                    <div class="media-controls">
                        <button class="media-btn" id="imageButton" title="Send Image" disabled>📷</button>
                        <button class="media-btn" id="videoButton" title="Send Video" disabled>🎥</button>
                        <button class="media-btn record-btn" id="recordButton" title="Record Audio" disabled>🎤</button>
                        <input type="file" id="imageInput" accept="image/*" class="hidden-input">
                        <input type="file" id="videoInput" accept="video/*" class="hidden-input">
                    </div>
                    
                    <div class="recording-indicator" id="recordingIndicator">
                        <div class="recording-dot"></div>
                        <span>Recording...</span>
                    </div>
                    
                    <input type="text" class="message-input" id="messageInput" placeholder="Type your message..." disabled>
                    <button class="send-btn" id="sendMessageBtn" disabled>Send</button>
                </div>
            </div>
        </div>
        
        <div class="connection-panel">
            <div class="connection-status">
                <span class="status-indicator status-disconnected" id="statusIndicator"></span>
                <span id="connectionStatus">Disconnected</span>
            </div>
            <div class="ip-display">
                <span class="peer-id-display" id="peerIdDisplay">Not connected</span>
                <button class="copy-btn" id="copyPeerIdBtn" disabled>Copy</button>
            </div>
        </div>
    </div>
    
    <!-- Floating GIF -->
    <div class="floating-gif" id="floatingGif">
        <img src="https://media.tenor.com/6fwaqkP8tP0AAAAC/niche-fruit.gif" alt="Floating Beh Beh GIF">
    </div>
    
    <!-- Login Modal -->
    <div class="modal" id="loginModal">
        <div class="modal-content">
            <h2>Join Beh Beh Chat</h2>
            <div class="form-group">
                <label for="username">Your Name</label>
                <input type="text" id="username" placeholder="Enter your name">
            </div>
            <button class="btn btn-primary" id="loginBtn">Join Chat</button>
        </div>
    </div>
    
    <!-- Server Host Modal -->
    <div class="modal" id="serverModal">
        <div class="modal-content">
            <h2>Host Server</h2>
            <div class="form-group">
                <label for="serverKey">Server Key</label>
                <input type="password" id="serverKey" placeholder="Enter server key">
            </div>
            <div class="form-group">
                <label for="roomCode">Room Code (3 digits)</label>
                <input type="text" id="roomCode" class="room-code-input" placeholder="000" maxlength="3" pattern="[0-9]{3}">
            </div>
            <button class="btn btn-primary" id="activateServerBtn">Activate Server</button>
        </div>
    </div>
    
    <!-- Connect Modal -->
    <div class="modal" id="connectModal">
        <div class="modal-content">
            <h2>Connect to Server</h2>
            <div class="form-group">
                <label for="connectRoomCode">Room Code (3 digits)</label>
                <input type="text" id="connectRoomCode" class="room-code-input" placeholder="000" maxlength="3" pattern="[0-9]{3}">
            </div>
            <button class="btn btn-primary" id="connectToServerBtn">Connect</button>
        </div>
    </div>

    <script>
        // DOM Elements
        const loginModal = document.getElementById('loginModal');
        const serverModal = document.getElementById('serverModal');
        const connectModal = document.getElementById('connectModal');
        const usernameInput = document.getElementById('username');
        const loginBtn = document.getElementById('loginBtn');
        const hostServerBtn = document.getElementById('hostServerBtn');
        const showConnectModalBtn = document.getElementById('showConnectModalBtn');
        const disconnectBtn = document.getElementById('disconnectBtn');
        const serverKeyInput = document.getElementById('serverKey');
        const roomCodeInput = document.getElementById('roomCode');
        const connectRoomCodeInput = document.getElementById('connectRoomCode');
        const activateServerBtn = document.getElementById('activateServerBtn');
        const connectToServerBtn = document.getElementById('connectToServerBtn');
        const messagesContainer = document.getElementById('messagesContainer');
        const messageInput = document.getElementById('messageInput');
        const sendMessageBtn = document.getElementById('sendMessageBtn');
        const userList = document.getElementById('userList');
        const statusIndicator = document.getElementById('statusIndicator');
        const connectionStatus = document.getElementById('connectionStatus');
        const peerIdDisplay = document.getElementById('peerIdDisplay');
        const currentUserItem = document.getElementById('currentUserItem');
        const currentPeerId = document.getElementById('currentPeerId');
        const copyPeerIdBtn = document.getElementById('copyPeerIdBtn');
        const floatingGif = document.getElementById('floatingGif');
        const imageButton = document.getElementById('imageButton');
        const videoButton = document.getElementById('videoButton');
        const recordButton = document.getElementById('recordButton');
        const imageInput = document.getElementById('imageInput');
        const videoInput = document.getElementById('videoInput');
        const recordingIndicator = document.getElementById('recordingIndicator');

        // Application State
        let currentUser = null;
        let isServerHost = false;
        let peer = null;
        let connections = [];
        let messages = [];
        let users = {};
        let connectionAttempts = {};
        
        // Media recording state
        let mediaRecorder = null;
        let audioChunks = [];
        let isRecording = false;

        // Initialize the application
        function init() {
            // Show login modal first
            loginModal.style.display = 'flex';
            
            // Event listeners
            loginBtn.addEventListener('click', handleLogin);
            hostServerBtn.addEventListener('click', showServerModal);
            showConnectModalBtn.addEventListener('click', showConnectModal);
            disconnectBtn.addEventListener('click', disconnect);
            activateServerBtn.addEventListener('click', activateServer);
            connectToServerBtn.addEventListener('click', connectToServer);
            sendMessageBtn.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            copyPeerIdBtn.addEventListener('click', copyPeerId);
            
            // Media controls event listeners
            imageButton.addEventListener('click', () => imageInput.click());
            videoButton.addEventListener('click', () => videoInput.click());
            imageInput.addEventListener('change', handleImageSelect);
            videoInput.addEventListener('change', handleVideoSelect);
            recordButton.addEventListener('click', toggleRecording);
            
            // Room code validation
            roomCodeInput.addEventListener('input', validateRoomCode);
            connectRoomCodeInput.addEventListener('input', validateRoomCode);
            
            // Close modals when clicking outside
            window.addEventListener('click', (e) => {
                if (e.target === loginModal) loginModal.style.display = 'none';
                if (e.target === serverModal) serverModal.style.display = 'none';
                if (e.target === connectModal) connectModal.style.display = 'none';
            });
            
            // Focus on username input
            usernameInput.focus();
            
            // Position floating GIF randomly
            positionFloatingGif();
            
            // Initialize button states
            updateButtonStates();
        }

        // Update button states based on connection status
        function updateButtonStates() {
            const isConnected = peer && peer.disconnected === false && peer.destroyed === false;
            
            // Header buttons
            hostServerBtn.disabled = !currentUser || isConnected;
            showConnectModalBtn.disabled = !currentUser || isConnected;
            disconnectBtn.disabled = !isConnected;
            
            // Chat buttons
            messageInput.disabled = !isConnected;
            sendMessageBtn.disabled = !isConnected;
            imageButton.disabled = !isConnected;
            videoButton.disabled = !isConnected;
            recordButton.disabled = !isConnected;
            copyPeerIdBtn.disabled = !isConnected || !peer || !peer.id;
        }

        // Validate room code input
        function validateRoomCode(e) {
            const input = e.target;
            input.value = input.value.replace(/[^0-9]/g, '');
            if (input.value.length > 3) {
                input.value = input.value.slice(0, 3);
            }
        }

        // Position floating GIF randomly on the side
        function positionFloatingGif() {
            const side = Math.random() > 0.5 ? 'left' : 'right';
            const top = Math.random() * 70 + 15; // 15% to 85% from top
            
            floatingGif.style[side] = '20px';
            floatingGif.style.top = top + '%';
            floatingGif.style.left = side === 'left' ? '20px' : 'auto';
            floatingGif.style.right = side === 'right' ? '20px' : 'auto';
        }

        // Handle user login
        function handleLogin() {
            const username = usernameInput.value.trim();
            if (username) {
                currentUser = {
                    id: generateId(),
                    name: username,
                    avatar: username.charAt(0).toUpperCase()
                };
                
                // Update UI
                currentUserItem.querySelector('.user-avatar').textContent = currentUser.avatar;
                currentUserItem.querySelector('.user-name').textContent = currentUser.name;
                
                loginModal.style.display = 'none';
                showNotification('Welcome to Beh Beh Chat, ' + username + '!');
                
                // Enable connection options
                updateButtonStates();
            } else {
                showNotification('Please enter a username', true);
            }
        }

        // Show server modal
        function showServerModal() {
            if (!currentUser) {
                showNotification('Please login first', true);
                loginModal.style.display = 'flex';
                return;
            }
            serverModal.style.display = 'flex';
            serverKeyInput.focus();
        }

        // Show connect modal
        function showConnectModal() {
            if (!currentUser) {
                showNotification('Please login first', true);
                loginModal.style.display = 'flex';
                return;
            }
            connectModal.style.display = 'flex';
            connectRoomCodeInput.focus();
        }

        // Activate server
        function activateServer() {
            const key = serverKeyInput.value.trim();
            const roomCode = roomCodeInput.value.trim();
            
            if (key === '1106699') {
                if (roomCode.length === 3) {
                    isServerHost = true;
                    initializePeer(true, roomCode);
                    serverModal.style.display = 'none';
                    serverKeyInput.value = '';
                    roomCodeInput.value = '';
                } else {
                    showNotification('Please enter a valid 3-digit room code', true);
                }
            } else {
                showNotification('Invalid server key. Please try again.', true);
            }
        }

        // Connect to server
        function connectToServer() {
            const roomCode = connectRoomCodeInput.value.trim();
            if (roomCode.length === 3) {
                const remoteId = 'beh-' + roomCode;
                initializePeer(false, remoteId);
                connectModal.style.display = 'none';
                connectRoomCodeInput.value = '';
            } else {
                showNotification('Please enter a valid 3-digit room code', true);
            }
        }

        // Initialize PeerJS
        function initializePeer(isHost, idParam = null) {
            // Generate a peer ID based on whether we're hosting or connecting
            let peerId;
            if (isHost) {
                // For host, use the room code to create a custom ID
                peerId = 'beh-' + idParam;
            } else {
                // For client, let PeerJS generate a random ID
                peerId = undefined;
            }
            
            // Create a peer
            peer = new Peer(peerId, {
                debug: 2,
                config: {
                    'iceServers': [
                        { urls: 'stun:stun.l.google.com:19302' },
                        { urls: 'stun:global.stun.twilio.com:3478' }
                    ]
                }
            });
            
            peer.on('open', (id) => {
                // Update connection status
                updateConnectionStatus('connected', id);
                
                // Store our own user with peer ID
                currentUser.peerId = id;
                users[id] = currentUser;
                updateUserList();
                
                if (isHost) {
                    showNotification('Server hosted successfully with ID: ' + id);
                    peerIdDisplay.textContent = id;
                    addSystemMessage('You are now hosting the chat. Your ID: ' + id);
                } else {
                    showNotification('Connected with ID: ' + id);
                    peerIdDisplay.textContent = 'Connected to: ' + idParam;
                    
                    // Connect to the remote peer
                    const conn = peer.connect(idParam);
                    setupConnection(conn);
                }
                
                // Update current peer ID display
                currentPeerId.textContent = 'ID: ' + id;
                
                // Update button states
                updateButtonStates();
            });
            
            peer.on('connection', (conn) => {
                // Check if we already have this connection to prevent duplicates
                if (!connections.some(c => c.peer === conn.peer)) {
                    setupConnection(conn);
                }
            });
            
            peer.on('error', (err) => {
                console.error('Peer error:', err);
                showNotification('Connection error: ' + err.type, true);
                updateConnectionStatus('disconnected');
                updateButtonStates();
            });
            
            peer.on('disconnected', () => {
                showNotification('Disconnected from peer', true);
                updateConnectionStatus('disconnected');
                updateButtonStates();
            });
            
            peer.on('close', () => {
                updateConnectionStatus('disconnected');
                updateButtonStates();
            });
            
            updateConnectionStatus('connecting');
            updateButtonStates();
        }

        // Set up a data connection
        function setupConnection(conn) {
            // Track connection attempts to prevent duplicates
            if (connectionAttempts[conn.peer]) {
                return;
            }
            connectionAttempts[conn.peer] = true;
            
            conn.on('open', () => {
                // Add to connections list
                connections.push(conn);
                
                // Send user info to the connected peer
                conn.send({
                    type: 'user_join',
                    user: currentUser
                });
                
                showNotification('Connected to peer: ' + conn.peer);
                updateUserList();
            });
            
            conn.on('data', (data) => {
                handleData(data, conn);
            });
            
            conn.on('close', () => {
                // Remove from connections
                connections = connections.filter(c => c.peer !== conn.peer);
                
                // Remove user from list
                if (users[conn.peer]) {
                    addSystemMessage(users[conn.peer].name + ' left the chat');
                    delete users[conn.peer];
                    updateUserList();
                }
                
                // Remove from connection attempts
                delete connectionAttempts[conn.peer];
                
                showNotification('Peer disconnected: ' + conn.peer, true);
            });
            
            conn.on('error', (err) => {
                console.error('Connection error:', err);
                showNotification('Connection error with peer: ' + conn.peer, true);
                
                // Remove from connection attempts
                delete connectionAttempts[conn.peer];
            });
        }

        // Handle incoming data
        function handleData(data, conn) {
            switch (data.type) {
                case 'user_join':
                    // Only add if we don't already have this user
                    if (!users[conn.peer]) {
                        users[conn.peer] = data.user;
                        users[conn.peer].peerId = conn.peer;
                        updateUserList();
                        addSystemMessage(data.user.name + ' joined the chat');
                        
                        // Send our user info back
                        conn.send({
                            type: 'user_join',
                            user: currentUser
                        });
                    }
                    break;
                    
                case 'message':
                    addMessage(data.message);
                    break;
                    
                case 'media':
                    addMediaMessage(data.media);
                    break;
                    
                case 'user_leave':
                    if (users[data.userId]) {
                        addSystemMessage(users[data.userId].name + ' left the chat');
                        delete users[data.userId];
                        updateUserList();
                    }
                    break;
            }
        }

        // Send a message
        function sendMessage() {
            const text = messageInput.value.trim();
            if (text && currentUser) {
                const message = {
                    id: generateId(),
                    type: 'text',
                    text: text,
                    sender: currentUser.id,
                    senderName: currentUser.name,
                    timestamp: new Date()
                };
                
                // Add to own chat
                addMessage(message);
                
                // Send to all connections
                connections.forEach(conn => {
                    if (conn.open) {
                        conn.send({
                            type: 'message',
                            message: message
                        });
                    }
                });
                
                // Clear input
                messageInput.value = '';
            }
        }
        
        // Send a media message
        function sendMediaMessage(mediaData) {
            if (currentUser) {
                const mediaMessage = {
                    id: generateId(),
                    type: mediaData.type,
                    data: mediaData.data,
                    sender: currentUser.id,
                    senderName: currentUser.name,
                    timestamp: new Date()
                };
                
                // Add to own chat
                addMediaMessage(mediaMessage);
                
                // Send to all connections
                connections.forEach(conn => {
                    if (conn.open) {
                        conn.send({
                            type: 'media',
                            media: mediaMessage
                        });
                    }
                });
            }
        }

        // Add a message to the UI
        function addMessage(message) {
            const messageEl = document.createElement('div');
            messageEl.classList.add('message');
            
            const isCurrentUser = currentUser && message.sender === currentUser.id;
            messageEl.classList.add(isCurrentUser ? 'sent' : 'received');
            
            messageEl.innerHTML = `
                <div class="message-sender">${isCurrentUser ? 'You' : message.senderName}</div>
                <div>${message.text}</div>
                <div class="message-time">${formatTime(message.timestamp)}</div>
            `;
            
            messagesContainer.appendChild(messageEl);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            // Add to messages array
            messages.push(message);
        }
        
        // Add a media message to the UI
        function addMediaMessage(mediaMessage) {
            const messageEl = document.createElement('div');
            messageEl.classList.add('message', 'media-message');
            
            const isCurrentUser = currentUser && mediaMessage.sender === currentUser.id;
            messageEl.classList.add(isCurrentUser ? 'sent' : 'received');
            
            let mediaContent = '';
            
            if (mediaMessage.type === 'image') {
                mediaContent = `<div class="media-content"><img src="${mediaMessage.data}" alt="Sent image"></div>`;
            } else if (mediaMessage.type === 'video') {
                mediaContent = `
                    <div class="media-content">
                        <video controls>
                            <source src="${mediaMessage.data}" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    </div>
                `;
            } else if (mediaMessage.type === 'audio') {
                mediaContent = `
                    <div class="media-content">
                        <audio controls class="audio-player">
                            <source src="${mediaMessage.data}" type="audio/webm">
                            Your browser does not support the audio element.
                        </audio>
                    </div>
                `;
            }
            
            messageEl.innerHTML = `
                <div class="message-sender">${isCurrentUser ? 'You' : mediaMessage.senderName}</div>
                ${mediaContent}
                <div class="message-time">${formatTime(mediaMessage.timestamp)}</div>
            `;
            
            messagesContainer.appendChild(messageEl);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            // Add to messages array
            messages.push(mediaMessage);
        }

        // Add a system message
        function addSystemMessage(text) {
            const messageEl = document.createElement('div');
            messageEl.classList.add('message', 'system');
            
            messageEl.innerHTML = `
                <div>${text}</div>
                <div class="message-time">${formatTime(new Date())}</div>
            `;
            
            messagesContainer.appendChild(messageEl);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Update user list UI
        function updateUserList() {
            // Clear all users except current user
            const userItems = userList.querySelectorAll('.user-item');
            userItems.forEach(item => {
                if (item.id !== 'currentUserItem') {
                    item.remove();
                }
            });
            
            // Add all connected users
            for (const peerId in users) {
                if (users[peerId].id !== currentUser.id) {
                    const userEl = document.createElement('li');
                    userEl.classList.add('user-item');
                    
                    userEl.innerHTML = `
                        <div class="user-avatar">${users[peerId].avatar}</div>
                        <div class="user-info">
                            <div class="user-name">${users[peerId].name}</div>
                            <div class="peer-id">ID: ${peerId}</div>
                        </div>
                    `;
                    
                    userList.appendChild(userEl);
                }
            }
        }

        // Handle image selection
        function handleImageSelect(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    sendMediaMessage({
                        type: 'image',
                        data: event.target.result
                    });
                };
                reader.readAsDataURL(file);
            }
            // Reset the input
            e.target.value = '';
        }
        
        // Handle video selection
        function handleVideoSelect(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    sendMediaMessage({
                        type: 'video',
                        data: event.target.result
                    });
                };
                reader.readAsDataURL(file);
            }
            // Reset the input
            e.target.value = '';
        }
        
        // Toggle audio recording
        function toggleRecording() {
            if (isRecording) {
                stopRecording();
            } else {
                startRecording();
            }
        }
        
        // Start audio recording
        function startRecording() {
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ audio: true })
                    .then(stream => {
                        mediaRecorder = new MediaRecorder(stream);
                        audioChunks = [];
                        
                        mediaRecorder.ondataavailable = (e) => {
                            audioChunks.push(e.data);
                        };
                        
                        mediaRecorder.onstop = () => {
                            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                            const reader = new FileReader();
                            reader.onload = () => {
                                sendMediaMessage({
                                    type: 'audio',
                                    data: reader.result
                                });
                            };
                            reader.readAsDataURL(audioBlob);
                            
                            // Stop all tracks in the stream
                            stream.getTracks().forEach(track => track.stop());
                        };
                        
                        mediaRecorder.start();
                        isRecording = true;
                        recordButton.classList.add('recording');
                        recordingIndicator.classList.add('active');
                    })
                    .catch(error => {
                        console.error('Error accessing microphone:', error);
                        showNotification('Could not access microphone. Please check permissions.', true);
                    });
            } else {
                showNotification('Your browser does not support audio recording', true);
            }
        }
        
        // Stop audio recording
        function stopRecording() {
            if (mediaRecorder && isRecording) {
                mediaRecorder.stop();
                isRecording = false;
                recordButton.classList.remove('recording');
                recordingIndicator.classList.remove('active');
            }
        }

        // Copy peer ID to clipboard
        function copyPeerId() {
            if (peer && peer.id) {
                navigator.clipboard.writeText(peer.id)
                    .then(() => {
                        showNotification('Peer ID copied to clipboard!');
                    })
                    .catch(err => {
                        showNotification('Failed to copy Peer ID', true);
                        console.error('Failed to copy: ', err);
                    });
            }
        }

        // Disconnect from all peers
        function disconnect() {
            if (isRecording) {
                stopRecording();
            }
            
            if (peer) {
                // Notify all connections that we're leaving
                connections.forEach(conn => {
                    if (conn.open) {
                        conn.send({
                            type: 'user_leave',
                            userId: currentUser.id
                        });
                        conn.close();
                    }
                });
                
                peer.destroy();
                peer = null;
            }
            
            // Reset state
            connections = [];
            users = {};
            connectionAttempts = {};
            
            // Update UI
            updateConnectionStatus('disconnected');
            peerIdDisplay.textContent = 'Not connected';
            currentPeerId.textContent = 'Not connected';
            
            // Remove all users except current user
            const userItems = userList.querySelectorAll('.user-item');
            userItems.forEach(item => {
                if (item.id !== 'currentUserItem') {
                    item.remove();
                }
            });
            
            addSystemMessage('Disconnected from all peers');
            showNotification('Disconnected from all peers');
            
            // Update button states
            updateButtonStates();
        }

        // Update connection status UI
        function updateConnectionStatus(status, peerId = null) {
            statusIndicator.classList.remove('status-connected', 'status-disconnected', 'status-connecting');
            
            switch (status) {
                case 'connected':
                    statusIndicator.classList.add('status-connected');
                    connectionStatus.textContent = 'Connected';
                    break;
                case 'connecting':
                    statusIndicator.classList.add('status-connecting');
                    connectionStatus.textContent = 'Connecting...';
                    break;
                case 'disconnected':
                    statusIndicator.classList.add('status-disconnected');
                    connectionStatus.textContent = 'Disconnected';
                    break;
            }
        }

        // Show notification
        function showNotification(message, isError = false) {
            // Create notification element
            const notification = document.createElement('div');
            notification.classList.add('notification');
            if (isError) {
                notification.style.borderLeftColor = 'var(--danger)';
            }
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Show notification
            setTimeout(() => {
                notification.classList.add('show');
            }, 10);
            
            // Hide after 3 seconds
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 3000);
        }

        // Helper functions
        function generateId() {
            return Math.random().toString(36).substring(2, 10);
        }

        function formatTime(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        // Initialize the app
        init();
    </script>
</body>
</html>
